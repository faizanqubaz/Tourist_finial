{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CL\\\\Downloads\\\\Tourist\\\\Tourist\\\\project\\\\src\\\\component\\\\GoogleMap\\\\CurrentLocation.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      lat,\n      lng\n    } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let {\n        zoom\n      } = this.props;\n      const {\n        lat,\n        lng\n      } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() is constructor that instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return /*#__PURE__*/React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: style,\n        ref: \"map\",\n        children: \"Loading map...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), this.renderChildren()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default CurrentLocation;\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["C:/Users/CL/Downloads/Tourist/Tourist/project/src/component/GoogleMap/CurrentLocation.js"],"names":["React","ReactDOM","mapStyles","map","position","width","height","CurrentLocation","Component","constructor","props","lat","lng","initialCenter","state","currentLocation","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","current","maps","center","LatLng","panTo","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","renderChildren","children","Children","c","cloneElement","mapCenter","render","style","defaultProps","visible"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst mapStyles = {\r\n  map: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: '100%'\r\n  }\r\n};\r\n\r\nexport class CurrentLocation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        const { lat, lng } = this.props.initialCenter;\r\n    \r\n        this.state = {\r\n          currentLocation: {\r\n            lat: lat,\r\n            lng: lng\r\n          }\r\n        };\r\n      }\r\n\r\n      componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.google !== this.props.google) {\r\n          this.loadMap();\r\n        }\r\n        if (prevState.currentLocation !== this.state.currentLocation) {\r\n          this.recenterMap();\r\n        }\r\n      }\r\n      \r\n  recenterMap() {\r\n    const map = this.map;\r\n    const current = this.state.currentLocation;\r\n    const google = this.props.google;\r\n    const maps = google.maps;\r\n\r\n    if (map) {\r\n      let center = new maps.LatLng(current.lat, current.lng);\r\n      map.panTo(center);\r\n    }\r\n  }\r\n\r\n  loadMap() {\r\n    if (this.props && this.props.google) {\r\n      // checks if google is available\r\n      const { google } = this.props;\r\n      const maps = google.maps;\r\n\r\n      const mapRef = this.refs.map;\r\n\r\n      // reference to the actual DOM element\r\n      const node = ReactDOM.findDOMNode(mapRef);\r\n\r\n      let { zoom } = this.props;\r\n      const { lat, lng } = this.state.currentLocation;\r\n      const center = new maps.LatLng(lat, lng);\r\n\r\n      const mapConfig = Object.assign(\r\n        {},\r\n        {\r\n          center: center,\r\n          zoom: zoom\r\n        }\r\n      );\r\n\r\n      // maps.Map() is constructor that instantiates the map\r\n      this.map = new maps.Map(node, mapConfig);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    if (this.props.centerAroundCurrentLocation) {\r\n      if (navigator && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(pos => {\r\n          const coords = pos.coords;\r\n          this.setState({\r\n            currentLocation: {\r\n              lat: coords.latitude,\r\n              lng: coords.longitude\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n    this.loadMap();\r\n  }\r\n\r\n  renderChildren() {\r\n    const { children } = this.props;\r\n\r\n    if (!children) return;\r\n\r\n    return React.Children.map(children, c => {\r\n      if (!c) return;\r\n\r\n      return React.cloneElement(c, {\r\n        map: this.map,\r\n        google: this.props.google,\r\n        mapCenter: this.state.currentLocation\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const style = Object.assign({}, mapStyles.map);\r\n\r\n    return (\r\n      <div>\r\n        <div style={style} ref=\"map\">\r\n          Loading map...\r\n        </div>\r\n        {this.renderChildren()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentLocation;\r\n\r\nCurrentLocation.defaultProps = {\r\n    zoom: 14,\r\n    initialCenter: {\r\n      lat: -1.2884,\r\n      lng: 36.8233\r\n    },\r\n    centerAroundCurrentLocation: false,\r\n    visible: true\r\n  };"]},"metadata":{},"sourceType":"module"}